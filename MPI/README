MPI Postman Sort

Description:
This program implements the Postman Sort algorithm using the Message Passing Interface (MPI) for parallelization. The Postman Sort algorithm sorts a large set of numbers based on their most significant digits. It divides the work among multiple processes to enhance performance on distributed systems.

Files:
- `mpi_postman_sort.c`: The main C file containing the implementation of the MPI Postman Sort algorithm.
- `README.md`: This readme file explaining the code and its execution.

Usage:
To compile the code, use an MPI compiler like `mpicc`:

```
mpicc mpi_postman_sort.c -o mpi_postman_sort
```

To run the program, use an MPI launcher like `mpirun`:

```
mpirun -np <number_of_processes> ./mpi_postman_sort
```

Explanation:

The code is divided into the following sections:

1. Initialization: The MPI environment is initialized, and the rank and size of each process are obtained.

2. Data Generation and Distribution: Process 0 generates random numbers for the array and determines the number of digits of each number. The number of digits (`n`) is then broadcasted to all processes.

3. Sorting Based on Most Significant Digit: Each process sorts a portion of the array based on the most significant digit. This sorting is done iteratively until all digits are considered.

4. Output: Process 0 calculates and displays the execution time.

5. Finalization: The MPI environment is finalized.

Output Explanation:
The output of the program displays the execution time of the sorting process. This time indicates how long it took for the entire sorting process to complete. The time is displayed in seconds.

C Binary Search

Description:
This program demonstrates the binary search algorithm in C. Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until the item is found or the subarray size becomes zero.

Files:
- `binary_search.c`: The main C file containing the implementation of the binary search algorithm.
- `README.md`: This readme file explaining the code and its execution.

Usage:
To compile the code, use any C compiler:

```
gcc binary_search.c -o binary_search
```

To run the program:

```
./binary_search
```

Explanation:

The code is divided into the following sections:

1. Main Function: The main function initializes an array, sorts it using the Quick Sort algorithm, and then prompts the user to enter a value to search for. It measures the time taken for sorting and searching and displays the results.

2. Quick Sort Function: The quickSort function sorts the array using the Quick Sort algorithm, which is an efficient divide-and-conquer sorting algorithm.

3. Binary Search Function: The binarySearch function implements the binary search algorithm to search for a value in the sorted array. It repeatedly divides the search interval in half until the value is found or the interval becomes empty.

Output Explanation:
The output of the program displays the time taken for sorting the list and searching for the element in the sorted list. These times indicate how long it took for each operation to complete, measured in seconds.
